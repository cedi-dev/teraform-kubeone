name: "Terraform KubeOne"

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      kubeconfig:
        description: 'Generate Kubeconfig'
        required: true
        default: 'false'

jobs:
  terraform:
    name: "terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve

      - name: Terraform Output
        run: terraform output -json > output.json

      - name: Archive terraform output
        uses: actions/upload-artifact@v2
        with:
          name: output.json
          path: output.json
  
  kubeone:
    name: "kubeone"
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
          
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download output.json
        uses: actions/download-artifact@v2
        with:
          name: output.json

      - name: Install KubeOne
        run: |
          git clone https://github.com/kubermatic/kubeone.git
          cd kubeone
          go build \
            -ldflags "\
            -s -w \
            -X k8c.io/kubeone/pkg/cmd.version=`git describe --tags` \
            -X k8c.io/kubeone/pkg/cmd.commit=`git rev-parse HEAD` \
            -X k8c.io/kubeone/pkg/cmd.date=`date +%FT%T%z` \
            "\
            -o kubeone \
            main.go
          cp kubeone /usr/local/bin/kubeone
          kubeone version

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_ed25519
          config: |
            *
              StrictHostKeyChecking=no
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Template credentials file
        run: envsubst < ./credentials.yaml.tpl > ./credentials.yaml
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
      
      - name: KubeOne Apply
        run: kubeone apply --manifest kubeone.yaml --credentials credentials.yaml --tfjson output.json --auto-approve --verbose

      - name: KubeOne Status
        run: kubeone status --manifest kubeone.yaml --credentials credentials.yaml --tfjson output.json

  kubectl:
    name: "kubectl"
    runs-on: ubuntu-latest
    needs: kubeone
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download output.json
        uses: actions/download-artifact@v2
        with:
          name: output.json

      - name: Template credentials file
        run: envsubst < ./credentials.yaml.tpl > ./credentials.yaml
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}

      - name: Template machine-deployment file
        run: |
          NETWORK_ID=`jq '.kubeone_hosts.value.control_plane.network_id' -r < output.json` \
          envsubst < ./machinedeployment.yaml.tpl > ./machinedeployment.yaml

      - name: Install KubeOne
        run: |
          git clone https://github.com/kubermatic/kubeone.git
          cd kubeone
          go build \
            -ldflags "\
            -s -w \
            -X k8c.io/kubeone/pkg/cmd.version=`git describe --tags` \
            -X k8c.io/kubeone/pkg/cmd.commit=`git rev-parse HEAD` \
            -X k8c.io/kubeone/pkg/cmd.date=`date +%FT%T%z` \
            "\
            -o kubeone \
            main.go
          cp kubeone /usr/local/bin/kubeone
          kubeone version

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          echo "$(<kubectl.sha256) kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Obtain kubeconfig
        run: kubeone kubeconfig --manifest kubeone.yaml --credentials credentials.yaml --tfjson output.json > kubeconfig

      - name: Status
        run: |
          kubectl version
          kubectl get pods -A
        env:
          KUBECONFIG: ./kubeconfig

      - name: Archive kubeconfig
        uses: actions/upload-artifact@v2
        if: ${{ github.event.inputs.kubeconfig == 'true' }}
        with:
          name: kubeconfig
          path: kubeconfig
          