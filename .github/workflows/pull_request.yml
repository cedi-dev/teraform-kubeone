name: "Pullrequest validate"

on:
  pull_request:

jobs:
  lint_manifests:
    name: "Lint yaml manifests"
    runs-on: ubuntu-latest
    steps:
      - uses: av0de/gh-action-install-kubeval@main

      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform Output
        run: |
          cat << EOF > output.json
          {
            "control_plane_info": {
              "value": {
                "location": "nbg1"
              }
            },
            "kubeone_api": {
              "value": {
                "endpoint": "api.av0.de"
              }
            },
            "kubeone_hosts": {
              "value": {
                "control_plane": {
                  "cluster_name": "test",
                  "network_id": "12345"
                }
              }
            }
          }
          EOF

      - name: Template machine-deployment file
        run: |
          export NETWORK_ID=`jq '.kubeone_hosts.value.control_plane.network_id' -r  output.json`
          export CLUSTER_NAME=`jq '.kubeone_hosts.value.control_plane.cluster_name' -r  output.json`
          export CLUSTER_VERSION=`yq e -j  kubeone.yaml | jq '.versions.kubernetes' -r`
          export DATACENTER_LOCATION=`jq -r '.control_plane_info.value.location' output.json`
          envsubst < ./manifests/machinedeployment.yaml.tpl > ./manifests/machinedeployment.yaml

      - name: Template credentials file
        run: envsubst < ./manifests/credentials.yaml.tpl > ./credentials.yaml
        env:
          HCLOUD_TOKEN: JHt7IHNlY3JldHMuSENMT1VEX1RPS0VOIH19

      - name: Template Hetzner API Secrets
        run: |
          envsubst < ./manifests/hcloud_secret.yaml.tpl > ./manifests/hcloud_secret.yaml
        env:
          HDNS_TOKEN: JHt7IHNlY3JldHMuSEROU19UT0tFTiB9fQ==

      - name: Template Helm Secrets
        run: |
          envsubst < ./manifests/helm_secret.yaml.tpl > ./manifests/helm_secret.yaml
        env:
          AGE_PRIVATE_KEY: JHt7IHNlY3JldHMuQUdFX1BSSVZBVEVfS0VZIH19
          AGE_PUBLIC_KEY: JHt7IHNlY3JldHMuQUdFX1BVQkxJQ19LRVkgfX0=

      - uses: ibiqlik/action-yamllint@v3
        id: lint
        continue-on-error: true
        with:
          file_or_dir: .
          format: standard
          config_file: .yamllint.yml

      - name: single-line
        id: lint-output
        if: steps.lint.outcome != 'success'
        run: |
          echo "::set-output name=logfile::$(sed ':a;N;$!ba;s/\n/{newline}/g' < ${{ steps.lint.outputs.logfile }} )"

      - name: Augment PR with yamllint infos
        uses: actions/github-script@0.9.0
        if: steps.lint.outcome != 'success'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### yamllint: ðŸ“–\`${{ steps.kubeval.outcome }}\`
            <details><summary>Show results</summary>

            \`\`\`
            ${{ steps.lint-output.outputs.logfile }}
            \`\`\`

            </details>

            __Author:__ @${{ github.actor }},
            __Action:__ \`${{ github.event_name }}\``;

            new_output = output.replace(/{newline}/g, "\n");

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: new_output
            })

      - name: Fail pipeline if previously failed
        if: steps.lint.outcome != 'success'
        run: exit 1

      - name: Kubeval
        id: kubeval
        continue-on-error: true
        run: |
          touch kubeval.txt
          for manifest in ./manifests/*.yaml
          do
            echo "$manifests"
            kubeval --ignore-missing-schemas --strict $manifest | tee -a kubeval.txt
          done
          echo "::set-output name=kubeval::$(sed ':a;N;$!ba;s/\n/{newline}/g' < kubeval.txt)"

      - name: Augment PR with kubeval infos
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Kubeval: ðŸ“–\`${{ steps.kubeval.outcome }}\`
            <details><summary>Show results</summary>

            \`\`\`
            ${{ steps.kubeval.outputs.kubeval }}
            \`\`\`

            </details>

            __Author:__ @${{ github.actor }},
            __Action:__ \`${{ github.event_name }}\``;

            new_output = output.replace(/{newline}/g, "\n");

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: new_output
            })

      - name: Fail pipeline if previously failed
        if: steps.kubeval.outcome != 'success'
        run: exit 1

  lint_terraform:
    name: "Lint terraform code"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform format check
        id: tffmt
        continue-on-error: true
        run: |
          terraform fmt -check | tee terraform_fmt.txt
          echo "::set-output name=fmt::$(sed ':a;N;$!ba;s/\n/{newline}/g' < terraform_fmt.txt)"
          terraform fmt -check

      - name: Augment PR with terraform format infos
        uses: actions/github-script@0.9.0
        if: steps.tffmt.outcome != 'success'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### terraform fmt -check: ðŸ“–\`${{ steps.tffmt.outcome }}\`
            <details><summary>Show results</summary>

            \`\`\`${{ steps.tffmt.outputs.fmt }}\`\`\`

            </details>

            __Author:__ @${{ github.actor }},
            __Action:__ \`${{ github.event_name }}\``;

            new_output = output.replace(/{newline}/g, "\n");

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: new_output
            })

      - name: Auto-Format with terraform fmt
        if: steps.tffmt.outcome != 'success'
        run: |
          terraform fmt

      - name: Commit terraform fmt
        uses: EndBug/add-and-commit@v9
        if: steps.tffmt.outcome != 'success'
        with:
          message: terraform fmt
          committer_name: GitHub Actions
          committer_email: actions@github.com

      - name: Terraform Validate
        id: validate
        continue-on-error: true
        run: |
          terraform validate | tee terraform_validate.txt
          echo "::set-output name=validate::$(sed ':a;N;$!ba;s/\n/{newline}/g' < terraform_fmt.txt)"

      - name: Augment PR with terraform format infos
        uses: actions/github-script@0.9.0
        if: steps.validate.outcome != 'success'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### terraform validate: ðŸ“–\`${{ steps.validate.outcome }}\`
            <details><summary>Show results</summary>

            \`\`\`
            ${{ steps.validate.outputs.validate }}
            \`\`\`

            </details>

            __Author:__ @${{ github.actor }},
            __Action:__ \`${{ github.event_name }}\``;

            new_output = output.replace(/{newline}/g, "\n");

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: new_output
            })

  terraform_plan:
    name: "[Terraform] Deploy Infrastructure"
    runs-on: ubuntu-latest
    needs: lint_terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color | tee plan.txt
          echo "::set-output name=tfplan::$(sed ':a;N;$!ba;s/\n/{newline}/g' < plan.txt)"
        continue-on-error: true

      - name: Augment PR with terraform plan infos
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${{ steps.plan.outputs.tfplan }}
            \`\`\`

            </details>

            __Author:__ @${{ github.actor }},
            __Action:__ \`${{ github.event_name }}\``;

            new_output = output.replace(/{newline}/g, "\n");

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: new_output
            })
