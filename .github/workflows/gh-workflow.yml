name: "Terraform KubeOne"

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      kubeconfig:
        description: 'Generate Kubeconfig'
        required: false
        default: 'false'
      verbose:
        description: 'run KubeOne with verbose output'
        required: false
        default: 'false'

jobs:
  lint:
    name: "Lint Configuration"
    runs-on: ubuntu-latest
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Checkout
        uses: actions/checkout@v2

      - name: Template machine-deployment file
        run: |
          export NETWORK_ID=`jq '.kubeone_hosts.value.control_plane.network_id' -r < output.json`
          export CLUSTER_NAME=`jq '.kubeone_hosts.value.control_plane.cluster_name' -r < output.json`
          export CLUSTER_VERSION=`yq e -j < kubeone.yaml | jq '.versions.kubernetes' -r`
          envsubst < ./manifests/machinedeployment.yaml.tpl > ./machinedeployment.yaml

      - name: Template credentials file
        run: envsubst < ./manifests/credentials.yaml.tpl > ./credentials.yaml
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}

      - name: Template Hetzner API Secrets
        run: |
          envsubst < ./manifests/hcloud_secret.yaml.tpl > ./hcloud_secret.yaml
        env:
          HDNS_TOKEN: ${{ secrets.HDNS_TOKEN }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}

      - name: Template ArgoCD OAuth Secrets
        run: |
          envsubst < ./manifests/argocd.yaml.tpl > ./argocd.yaml
        env:
          GITHUB_OIDC_CLIENT_ID: ${{ secrets.OIDC_CLIENT_ID }}
          GITHUB_OIDC_CLIENT_SECRET: ${{ secrets.OIDC_CLIENT_SECRET }}

      - uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .
          format: standard
          config_file: .yamllint.yml

      - name: Terraform format check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform init && terraform validate

  terraform:
    name: "[Terraform] Deploy Infrastructure"
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve

      - name: Terraform Output
        run: terraform output -json > output.json

      - name: Archive terraform output
        uses: actions/upload-artifact@v2
        with:
          name: output.json
          path: output.json

  kubeone:
    name: "[KubeOne] Provision K8s Cluster"
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download output.json
        uses: actions/download-artifact@v2
        with:
          name: output.json

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_ed25519
          config: |
            *
              StrictHostKeyChecking=no
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Template credentials file
        run: envsubst < ./manifests/credentials.yaml.tpl > ./credentials.yaml
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}

      - name: KubeOne Apply
        uses: cedi/gh-action-kubeone@main
        if: github.event.inputs.verbose != 'true'
        with:
          version: master
          command: apply
          args: --auto-approve

      - name: KubeOne Apply (verbose)
        uses: cedi/gh-action-kubeone@main
        if: github.event.inputs.verbose == 'true'
        with:
          version: master
          command: apply
          args: --auto-approve --verbose

      - name: KubeOne Status
        uses: cedi/gh-action-kubeone@main
        with:
          version: master
          command: status

  kubectl:
    name: "[kubectl] Apply initial configuration"
    runs-on: ubuntu-latest
    needs: kubeone
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          echo "$(<kubectl.sha256) kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Checkout
        uses: actions/checkout@v2

      - name: Download output.json
        uses: actions/download-artifact@v2
        with:
          name: output.json

      - name: Template credentials file
        run: envsubst < ./manifests/credentials.yaml.tpl > ./credentials.yaml
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_ed25519
          config: |
            *
              StrictHostKeyChecking=no
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Obtain kubeconfig
        uses: cedi/gh-action-kubeone@main
        with:
          version: master
          command: kubeconfig
          args: "> kubeconfig"

      - name: Archive kubeconfig
        uses: actions/upload-artifact@v2
        if: github.event.inputs.kubeconfig == 'true'
        with:
          name: kubeconfig
          path: kubeconfig

      - name: Template machine-deployment file
        run: |
          export NETWORK_ID=`jq '.kubeone_hosts.value.control_plane.network_id' -r < output.json`
          export CLUSTER_NAME=`jq '.kubeone_hosts.value.control_plane.cluster_name' -r < output.json`
          export CLUSTER_VERSION=`yq e -j < kubeone.yaml | jq '.versions.kubernetes' -r`
          envsubst < ./manifests/machinedeployment.yaml.tpl > ./machinedeployment.yaml

      - name: Apply MachineDeployment
        run: kubectl apply -f ./machinedeployment.yaml
        env:
          KUBECONFIG: ./kubeconfig

      - name: Template Hetzner API Secrets
        run: |
          envsubst < ./manifests/hcloud_secret.yaml.tpl > ./hcloud_secret.yaml
        env:
          HDNS_TOKEN: ${{ secrets.HDNS_TOKEN }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}

      - name: Apply Hetzner API Secrets
        run: kubectl apply -f ./hcloud_secret.yaml
        env:
          KUBECONFIG: ./kubeconfig

      - name: Template ArgoCD OAuth Secrets
        run: |
          envsubst < ./manifests/argocd.yaml.tpl > ./argocd.yaml
        env:
          GITHUB_OIDC_CLIENT_ID: ${{ secrets.OIDC_CLIENT_ID }}
          GITHUB_OIDC_CLIENT_SECRET: ${{ secrets.OIDC_CLIENT_SECRET }}

      - name: Apply Hetzner ArgoCD OAuth Secrets
        run: kubectl apply -f ./argocd.yaml
        env:
          KUBECONFIG: ./kubeconfig

      - name: Install meta ArgoCD Application
        run: |
          git clone https://github.com/cedi-dev/k8s-manifests.git
          helm repo add argo-cd https://argoproj.github.io/argo-helm
          helm repo add prometheus https://prometheus-community.github.io/helm-charts
          pushd ./k8s-manifests/charts/argocd/
          helm dependency update && helm dependency build
          popd
          pushd ./k8s-manifests/charts/kube-prometheus-stack/
          helm dependency update && helm dependency build
          popd
          # install kube-prometheus-stack
          helm upgrade --install prometheus-stack ./k8s-manifests/charts/kube-prometheus-stack/ -f ./k8s-manifests/charts/kube-prometheus-stack/values.yaml -n monitoring
          # install argocd
          helm upgrade --install argocd ./k8s-manifests/charts/argocd/ -f ./k8s-manifests/charts/argocd/values.yaml -n argocd
          # install meta argocd application, referencing the repo itself for auto updates
          kubectl apply -f k8s-manifests/argo-apps/k8s-cedi-dev.yaml
        env:
          KUBECONFIG: ./kubeconfig
