name: "Terraform KubeOne"

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      kubeconfig:
        description: 'Generate Kubeconfig'
        required: false
        default: 'false'
      verbose:
        description: 'run KubeOne with verbose output'
        required: false
        default: 'false'

jobs:
  lint:
    name: "Lint Configuration"
    runs-on: ubuntu-latest
    steps:
      - uses: av0de/gh-action-install-kubeval@main

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Output
        run: terraform output -json > output.json

      - name: Template machine-deployment file
        run: |
          export NETWORK_ID=`jq '.kubeone_hosts.value.control_plane.network_id' -r  output.json`
          export CLUSTER_NAME=`jq '.kubeone_hosts.value.control_plane.cluster_name' -r  output.json`
          export CLUSTER_VERSION=`yq e -j  kubeone.yaml | jq '.versions.kubernetes' -r`
          export DATACENTER_LOCATION=`jq -r '.control_plane_info.value.location' output.json`
          envsubst < ./manifests/machinedeployment.yaml.tpl > ./manifests/machinedeployment.yaml

      - name: Template credentials file
        run: envsubst < ./manifests/credentials.yaml.tpl > ./credentials.yaml
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}

      - name: Template Hetzner API Secrets
        run: |
          envsubst < ./manifests/hcloud_secret.yaml.tpl > ./manifests/hcloud_secret.yaml
        env:
          HDNS_TOKEN: ${{ secrets.HDNS_TOKEN }}

      - name: Template Helm Secrets
        run: |
          envsubst < ./manifests/helm_secret.yaml.tpl > ./manifests/helm_secret.yaml
        env:
          AGE_PRIVATE_KEY: ${{ secrets.AGE_PRIVATE_KEY }}
          AGE_PUBLIC_KEY: ${{ secrets.AGE_PUBLIC_KEY }}

      - uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .
          format: standard
          config_file: .yamllint.yml

      - name: Kubeval
        run: |
          for manifest in ./manifests/*.yaml
          do
            echo "$manifests"
            kubeval --ignore-missing-schemas --strict $manifest
          done

      - name: Terraform format check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

  terraform:
    name: "[Terraform] Deploy Infrastructure"
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Terraform Output
        run: terraform output -json > output.json

      - name: Archive terraform output
        uses: actions/upload-artifact@v2
        with:
          name: output.json
          path: output.json

  kubeone:
    name: "[KubeOne] Provision K8s Cluster"
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download output.json
        uses: actions/download-artifact@v2
        with:
          name: output.json

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_ed25519
          config: |
            *
              StrictHostKeyChecking=no
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Template credentials file
        run: envsubst < ./manifests/credentials.yaml.tpl > ./credentials.yaml
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}

      - name: KubeOne Apply
        id: apply
        uses: cedi/gh-action-kubeone@main
        if: github.event.inputs.verbose != 'true'
        continue-on-error: true
        with:
          version: v1.4.2
          command: apply
          args: --auto-approve

      - name: KubeOne Apply (verbose)
        uses: cedi/gh-action-kubeone@main
        if: github.event.inputs.verbose == 'true' || steps.apply.outcome != 'success'
        with:
          version: v1.4.2
          command: apply
          args: --auto-approve --verbose

      - name: KubeOne Status
        uses: cedi/gh-action-kubeone@main
        with:
          version: v1.4.2
          command: status

  kubectl:
    name: "[kubectl] Apply initial configuration"
    runs-on: ubuntu-latest
    needs: kubeone
    steps:
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          echo "$(<kubectl.sha256) kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Checkout
        uses: actions/checkout@v2

      - name: Download output.json
        uses: actions/download-artifact@v2
        with:
          name: output.json

      - name: Template credentials file
        run: envsubst < ./manifests/credentials.yaml.tpl > ./credentials.yaml
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_ed25519
          config: |
            *
              StrictHostKeyChecking=no
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Obtain kubeconfig
        uses: cedi/gh-action-kubeone@main
        with:
          version: v1.4.2
          command: kubeconfig
          args: "> kubeconfig"

      - name: Archive kubeconfig
        uses: actions/upload-artifact@v2
        if: github.event.inputs.kubeconfig == 'true'
        with:
          name: kubeconfig
          path: kubeconfig

      - name: Template machine-deployment file
        run: |
          export NETWORK_ID=`jq '.kubeone_hosts.value.control_plane.network_id' -r < output.json`
          export CLUSTER_NAME=`jq '.kubeone_hosts.value.control_plane.cluster_name' -r < output.json`
          export CLUSTER_VERSION=`yq e -j < kubeone.yaml | jq '.versions.kubernetes' -r`
          export DATACENTER_LOCATION=`jq -r '.control_plane_info.value.location' output.json`
          envsubst < ./manifests/machinedeployment.yaml.tpl > ./machinedeployment.yaml

      - name: Archive machine-deployment file
        uses: actions/upload-artifact@v2
        with:
          name: machinedeployment.yaml
          path: machinedeployment.yaml

      - name: Apply MachineDeployment
        run: kubectl apply -f ./machinedeployment.yaml
        env:
          KUBECONFIG: ./kubeconfig

      - name: Template Hetzner API Secrets
        run: |
          envsubst < ./manifests/hcloud_secret.yaml.tpl > ./hcloud_secret.yaml
        env:
          HDNS_TOKEN: ${{ secrets.HDNS_TOKEN }}

      - name: Apply Hetzner API Secrets
        run: kubectl apply -f ./hcloud_secret.yaml
        env:
          KUBECONFIG: ./kubeconfig

      - name: Template Helm Secrets
        run: |
          envsubst < ./manifests/helm_secret.yaml.tpl > ./helm_secret.yaml
        env:
          AGE_PRIVATE_KEY: ${{ secrets.AGE_PRIVATE_KEY }}
          AGE_PUBLIC_KEY: ${{ secrets.AGE_PUBLIC_KEY }}

      - name: Apply Helm Secrets
        run: kubectl apply -f ./helm_secret.yaml
        env:
          KUBECONFIG: ./kubeconfig

  machinedeployment:
    name: "Deploy Machinedeployment yaml to k8s-manifest repo"
    runs-on: ubuntu-latest
    needs: kubectl
    steps:
      - name: Checkout k8s-manifests repo
        uses: actions/checkout@v2
        with:
          # Repository name with owner. For example, actions/checkout
          # Default: ${{ github.repository }}
          repository: "av0de/k8s-manifests"
          token: "${{ secrets.DEPLOY_GH_KEY }}"

      - name: Configure git user
        run: |
          git config user.name 'cedi'
          git config user.email 'cedi@users.noreply.github.com'

      - name: Download machinedeployment
        uses: actions/download-artifact@v2
        with:
          name: machinedeployment.yaml

      - name: move machinedeployment.yaml to right place
        run: |
          mv ./machinedeployment.yaml ./manifests/machinedeployment/cpx31.yaml

      - name: Check if there are changes
        id: changes
        uses: UnicornGlobal/has-changes-action@v1.0.11

      - name: Create Pullrequest
        uses: peter-evans/create-pull-request@v3
        if: steps.changes.outputs.changed == 1
        with:
          token: "${{ secrets.DEPLOY_GH_KEY }}"
          title: "Update machinedeployment"
          base: main
          delete-branch: true
          commit-message: "bump machine deployment"
          add-paths: manifests/machinedeployment/cpx31.yaml
